{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default_avatar.png","path":"img/default_avatar.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1463930902655},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1463930902655},{"_id":"themes/yilia/_config.yml","hash":"eba79aecc9de0c05cc44586a7d40899e51fad801","modified":1464534363772},{"_id":"themes/yilia/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1463930902671},{"_id":"source/_posts/first-article.md","hash":"63abb8403bf3b601764199ae497421aa19160c93","modified":1464533013237},{"_id":"source/_posts/git入门级-在github创建项目.md","hash":"55050b76d473aa2f3778392158e4473bfac0a464","modified":1464875196178},{"_id":"source/_posts/gulp实现hexoMarkDown同步编译.md","hash":"88172ab23aec69b0c8a98740a5bf055c04a49efe","modified":1463223699559},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1462164752174},{"_id":"source/_posts/hexo-基础操作.md","hash":"692234a28526eeb39b2f8dc4dd308df53134c16a","modified":1463216413992},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1463930902624},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1463930902624},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1463930840275},{"_id":"themes/yilia/.git/index","hash":"8da8f4ad47ec743a0b087eb2346a744dee8f3f3c","modified":1464877595195},{"_id":"themes/yilia/.git/packed-refs","hash":"102a8556f68dca2b07b7ef5c523080d0dcbbe257","modified":1463930902624},{"_id":"themes/yilia/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1463930902655},{"_id":"themes/yilia/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1463930902655},{"_id":"themes/yilia/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1463930902655},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1463930902655},{"_id":"themes/yilia/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1463930902655},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1463930902655},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1463930902655},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1463930902655},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1463930902655},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1463930902655},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1463930902655},{"_id":"themes/yilia/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1463930902671},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1463930902671},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1463930902671},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1463930902671},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1463930840291},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1463930840353},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1463930840353},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1463930840353},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1463930840369},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1463930840384},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1463930840400},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1463930840416},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1463930840416},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1463930840416},{"_id":"themes/yilia/.git/logs/HEAD","hash":"aaddbd78217202e3dc485a01ba77f74f36dfa191","modified":1463930902624},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"3709af4e8f7e1196dbd1f9dea62fa440d4b47836","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"420b94c78832456686ebd9831a5bfcb05365645a","modified":1464877593276},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"2bbf5aad03f54055d9d7852e70ff7e6952a41f26","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b03e8424b4798d4887801afdfae457fbf6027838","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1463930902655},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463930902671},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463930902671},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1463930902686},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1463930902671},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1463930902671},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1463930902671},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1463930902671},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1463930902686},{"_id":"themes/yilia/source/img/default_avatar.png","hash":"3b065a127329c5d99c4f6f59d3298e109bb6bbcd","modified":1463209316039},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1463930902686},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1463930902686},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1463930902686},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1463930902686},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1463930902686},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1463930902686},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1463930902686},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1463930902686},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1463930902686},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1463930902686},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1463930902686},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1463930902686},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1463930902686},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1463930902686},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1463930902686},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1463930902686},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1463930902686},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1463930902733},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1463930902733},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1463930902733},{"_id":"themes/yilia/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1463930902733},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1463930902733},{"_id":"themes/yilia/.git/objects/pack/pack-8720154b4a9cfed216fbde3ba2ae357175a243c2.idx","hash":"10b95afc2dfb41649d2105d919957e91954d7c63","modified":1463930902328},{"_id":"themes/yilia/.git/refs/heads/master","hash":"154ba3f579c6295c558c47456b8023ff4f0cc214","modified":1463930902624},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"c115c282eebfb6b18612d2d8733272c270b03066","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"d50294bf9858e7942208c380e851a37ed37f1d6f","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1463930902655},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1463930902655},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1463930902686},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1463930902686},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1463930902671},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1463930902671},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1463930902671},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1463930902671},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1463930902671},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1463930902671},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1463930902671},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1463930902671},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1463930902671},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"aaddbd78217202e3dc485a01ba77f74f36dfa191","modified":1463930902624},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1463930902624},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"aaddbd78217202e3dc485a01ba77f74f36dfa191","modified":1463930902624},{"_id":"themes/yilia/.git/objects/pack/pack-8720154b4a9cfed216fbde3ba2ae357175a243c2.pack","hash":"c22047a03f1b86f8c5940887b0c4f1bc4b79666c","modified":1463930902452},{"_id":"public/2016/05/07/hexo-基础操作/index.html","hash":"57bc7814e734b18e2a63d6f809154fe7eb0a7ad5","modified":1464877665268},{"_id":"public/2016/05/02/first-article/index.html","hash":"b7044e01836788143340f918f24d6720c8fb495c","modified":1464877665268},{"_id":"public/2016/05/02/hello-world/index.html","hash":"360f7ad27a188d5cee509c6e01c0dfe8ff1f9b8a","modified":1464877665268},{"_id":"public/archives/index.html","hash":"7ee30e0e80de3c17b0608a82a4a78248a607a424","modified":1464877665268},{"_id":"public/archives/2016/index.html","hash":"90683a7eb862eada4bedc8b61fd140a03c60373d","modified":1464877665268},{"_id":"public/archives/2016/05/index.html","hash":"b687116e80efcb7bbde4feb7955d145dd757ad65","modified":1464877665268},{"_id":"public/archives/2016/06/index.html","hash":"810726c6476962bacdc406ab9b5a6f821f656038","modified":1464877665268},{"_id":"public/2016/06/02/git入门级-在github创建项目/index.html","hash":"1674683564ba2f886bda4bef761470c5832bd94a","modified":1464877665268},{"_id":"public/2016/05/14/gulp实现hexoMarkDown同步编译/index.html","hash":"07534a4d79b984ec51703630bbfe746dcf06abb1","modified":1464877665268},{"_id":"public/index.html","hash":"e0bc9cc301cbf69a071ec296b71dd715fddb5c3a","modified":1464877665268},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464877665268},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464877665268},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1464877665268},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1464877665268},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1464877665268},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1464877665268},{"_id":"public/img/default_avatar.png","hash":"3b065a127329c5d99c4f6f59d3298e109bb6bbcd","modified":1464877665268},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1464877665268},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1464877665268},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1464877665268},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1464877665268},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1464877665268},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1464877665268},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1464877665268},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1464877665268},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1464877665284},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1464877665284},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1464877665284},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1464877665284},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1464877665284},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1464877665284},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1464877665284},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1464877665284},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1464877665284},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1464877665284},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1464877665284},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1464877665284},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1464877665284},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1464877665284},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1464877665284},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1464877666329},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1464877666329},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1464877666329},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1464877666329},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1464877666329},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1464877666329},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1464877666329},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1464877666329},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1464877666329},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1464877666329},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1464877666329},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1464877666329},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1464877666329},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1464877666329},{"_id":"public/css/style.css","hash":"10e9b93cf935a165020e48334a40b84b0f895401","modified":1464877666329}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"first article","date":"2016-05-02T05:32:43.000Z","_content":"* this is my first article by hexo \n","source":"_posts/first-article.md","raw":"---\ntitle: first article\ndate: 2016-05-02 13:32:43\ntags:\n---\n* this is my first article by hexo \n","slug":"first-article","published":1,"updated":"2016-05-29T14:43:33.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioyec81v0000usv4lsgeb6oy","content":"<ul>\n<li>this is my first article by hexo </li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>this is my first article by hexo </li>\n</ul>\n"},{"title":"git入门级--在github创建项目","date":"2016-06-02T13:42:13.000Z","_content":"## git分布式版本控制系统\n我第一个接触的版本控制系统是svn，当时觉得版本控制就是这样，直到我遇到了git...\ngit是分布式版本控制系统，合适分布式开发，强调个体。速度快、灵活，代码冲突了也比较好解决，最让我喜欢的还是git的分支切换。\n## 在github上创建一个空项目\n我这里git的远程仓库选择[github](https://github.com/)，github是全球最大的代码托管库，在国内也有许多类似的站点可以选用（比如：[coding](https://coding.net)）。\n* 这里假定已经有了github账号。登录github点击右上角的加号，选择new repository选项新建一个项目。\n![新建项目](http://upload-images.jianshu.io/upload_images/2005796-cd1f6f307fea4726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 填写新项目的基本信息：\n新的项目名称，描述，其他默认，然后点击create repository按钮新建项目\n![填写新项目基本信息](http://upload-images.jianshu.io/upload_images/2005796-6bf678d065940f59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 克隆新项目至本地\n点击README按钮，去编辑README文件。\n![新建README文件](http://upload-images.jianshu.io/upload_images/2005796-40f60ac69c4afd6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n写下hello world，然后到页面最下方点击commit new file按钮。\n![hello world](http://upload-images.jianshu.io/upload_images/2005796-48f7ddbdb33cd78e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击use https 然后点复制按钮\n![复制](http://upload-images.jianshu.io/upload_images/2005796-0d177247118d3038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n去你的本地文件夹，打开git bash。输入命令\n```bash\ngit clone <刚才复制的项目地址>\n```\n![git bash](http://upload-images.jianshu.io/upload_images/2005796-ec0fa26bc9843e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果还没安装git，可以自行百度[下载git](https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&wd=&eqid=a85caa0700009e1500000004575021d8)，安装无脑，一路下一步就好。\n到此为止，新的项目就好了。\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2005796-9f00c74a78fa4d75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 提交 (commit)\n进入新建的项目文件夹，就可以开始你的代码了。\n![demo文件夹](http://upload-images.jianshu.io/upload_images/2005796-24afb72cb0496765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这里为了方便，假定已经在项目里写了一段代码。准备提交至远端代码仓库。进入项目文件夹，输入命令：\n```bash\n git status\n```\n![git status](http://upload-images.jianshu.io/upload_images/2005796-6d946ed08091f3fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n添加更改的代码\n```bash\ngit add .\n```\n![git add .](http://upload-images.jianshu.io/upload_images/2005796-e40153954f71e885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n提交代码\n```bash\ngit commit -m \"提交代码\"\n```\n![提交代码](http://upload-images.jianshu.io/upload_images/2005796-96ce5cd702905509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nlog命令可以查看提交历史\n```bash\ngit log\n```\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2005796-869b30a6c9cff67e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 推送提交至远程分支push\n```bash\ngit push origin master\n```\n![push](http://upload-images.jianshu.io/upload_images/2005796-bff28f8a53e97a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此就完成了git的首次提交\n![](http://upload-images.jianshu.io/upload_images/2005796-c1d96cf942bd63ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 补充\n这里使用的bash是[git(戳这里下载)](https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&wd=&eqid=a85caa0700009e1500000004575021d8)自带的，如果觉得打命令搞不懂，可以试试图形化界面(例如：sourcetree)","source":"_posts/git入门级-在github创建项目.md","raw":"---\ntitle: git入门级--在github创建项目\ndate: 2016-06-02 21:42:13\ntags:\n---\n## git分布式版本控制系统\n我第一个接触的版本控制系统是svn，当时觉得版本控制就是这样，直到我遇到了git...\ngit是分布式版本控制系统，合适分布式开发，强调个体。速度快、灵活，代码冲突了也比较好解决，最让我喜欢的还是git的分支切换。\n## 在github上创建一个空项目\n我这里git的远程仓库选择[github](https://github.com/)，github是全球最大的代码托管库，在国内也有许多类似的站点可以选用（比如：[coding](https://coding.net)）。\n* 这里假定已经有了github账号。登录github点击右上角的加号，选择new repository选项新建一个项目。\n![新建项目](http://upload-images.jianshu.io/upload_images/2005796-cd1f6f307fea4726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 填写新项目的基本信息：\n新的项目名称，描述，其他默认，然后点击create repository按钮新建项目\n![填写新项目基本信息](http://upload-images.jianshu.io/upload_images/2005796-6bf678d065940f59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 克隆新项目至本地\n点击README按钮，去编辑README文件。\n![新建README文件](http://upload-images.jianshu.io/upload_images/2005796-40f60ac69c4afd6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n写下hello world，然后到页面最下方点击commit new file按钮。\n![hello world](http://upload-images.jianshu.io/upload_images/2005796-48f7ddbdb33cd78e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击use https 然后点复制按钮\n![复制](http://upload-images.jianshu.io/upload_images/2005796-0d177247118d3038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n去你的本地文件夹，打开git bash。输入命令\n```bash\ngit clone <刚才复制的项目地址>\n```\n![git bash](http://upload-images.jianshu.io/upload_images/2005796-ec0fa26bc9843e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果还没安装git，可以自行百度[下载git](https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&wd=&eqid=a85caa0700009e1500000004575021d8)，安装无脑，一路下一步就好。\n到此为止，新的项目就好了。\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2005796-9f00c74a78fa4d75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 提交 (commit)\n进入新建的项目文件夹，就可以开始你的代码了。\n![demo文件夹](http://upload-images.jianshu.io/upload_images/2005796-24afb72cb0496765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这里为了方便，假定已经在项目里写了一段代码。准备提交至远端代码仓库。进入项目文件夹，输入命令：\n```bash\n git status\n```\n![git status](http://upload-images.jianshu.io/upload_images/2005796-6d946ed08091f3fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n添加更改的代码\n```bash\ngit add .\n```\n![git add .](http://upload-images.jianshu.io/upload_images/2005796-e40153954f71e885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n提交代码\n```bash\ngit commit -m \"提交代码\"\n```\n![提交代码](http://upload-images.jianshu.io/upload_images/2005796-96ce5cd702905509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nlog命令可以查看提交历史\n```bash\ngit log\n```\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2005796-869b30a6c9cff67e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 推送提交至远程分支push\n```bash\ngit push origin master\n```\n![push](http://upload-images.jianshu.io/upload_images/2005796-bff28f8a53e97a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此就完成了git的首次提交\n![](http://upload-images.jianshu.io/upload_images/2005796-c1d96cf942bd63ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 补充\n这里使用的bash是[git(戳这里下载)](https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&wd=&eqid=a85caa0700009e1500000004575021d8)自带的，如果觉得打命令搞不懂，可以试试图形化界面(例如：sourcetree)","slug":"git入门级-在github创建项目","published":1,"updated":"2016-06-02T13:46:36.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioyec82a0001usv4cpfgsjme","content":"<h2 id=\"git分布式版本控制系统\"><a href=\"#git分布式版本控制系统\" class=\"headerlink\" title=\"git分布式版本控制系统\"></a>git分布式版本控制系统</h2><p>我第一个接触的版本控制系统是svn，当时觉得版本控制就是这样，直到我遇到了git…<br>git是分布式版本控制系统，合适分布式开发，强调个体。速度快、灵活，代码冲突了也比较好解决，最让我喜欢的还是git的分支切换。</p>\n<h2 id=\"在github上创建一个空项目\"><a href=\"#在github上创建一个空项目\" class=\"headerlink\" title=\"在github上创建一个空项目\"></a>在github上创建一个空项目</h2><p>我这里git的远程仓库选择<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>，github是全球最大的代码托管库，在国内也有许多类似的站点可以选用（比如：<a href=\"https://coding.net\" target=\"_blank\" rel=\"external\">coding</a>）。</p>\n<ul>\n<li><p>这里假定已经有了github账号。登录github点击右上角的加号，选择new repository选项新建一个项目。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-cd1f6f307fea4726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新建项目\"></p>\n</li>\n<li><p>填写新项目的基本信息：<br>新的项目名称，描述，其他默认，然后点击create repository按钮新建项目<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-6bf678d065940f59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"填写新项目基本信息\"></p>\n</li>\n<li><p>克隆新项目至本地<br>点击README按钮，去编辑README文件。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-40f60ac69c4afd6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新建README文件\"><br>写下hello world，然后到页面最下方点击commit new file按钮。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-48f7ddbdb33cd78e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hello world\"><br>点击use https 然后点复制按钮<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-0d177247118d3038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复制\"><br>去你的本地文件夹，打开git bash。输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;刚才复制的项目地址&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-ec0fa26bc9843e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git bash\"><br>如果还没安装git，可以自行百度<a href=\"https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&amp;wd=&amp;eqid=a85caa0700009e1500000004575021d8\" target=\"_blank\" rel=\"external\">下载git</a>，安装无脑，一路下一步就好。<br>到此为止，新的项目就好了。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-9f00c74a78fa4d75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h2 id=\"提交-commit\"><a href=\"#提交-commit\" class=\"headerlink\" title=\"提交 (commit)\"></a>提交 (commit)</h2><p>进入新建的项目文件夹，就可以开始你的代码了。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-24afb72cb0496765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"demo文件夹\"><br>这里为了方便，假定已经在项目里写了一段代码。准备提交至远端代码仓库。进入项目文件夹，输入命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-6d946ed08091f3fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git status\"><br>添加更改的代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-e40153954f71e885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git add .\"><br>提交代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"提交代码\"</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-96ce5cd702905509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"提交代码\"><br>log命令可以查看提交历史<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-869b30a6c9cff67e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h2 id=\"推送提交至远程分支push\"><a href=\"#推送提交至远程分支push\" class=\"headerlink\" title=\"推送提交至远程分支push\"></a>推送提交至远程分支push</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-bff28f8a53e97a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"push\"><br>至此就完成了git的首次提交<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-c1d96cf942bd63ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>这里使用的bash是<a href=\"https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&amp;wd=&amp;eqid=a85caa0700009e1500000004575021d8\" target=\"_blank\" rel=\"external\">git(戳这里下载)</a>自带的，如果觉得打命令搞不懂，可以试试图形化界面(例如：sourcetree)</p>\n","excerpt":"","more":"<h2 id=\"git分布式版本控制系统\"><a href=\"#git分布式版本控制系统\" class=\"headerlink\" title=\"git分布式版本控制系统\"></a>git分布式版本控制系统</h2><p>我第一个接触的版本控制系统是svn，当时觉得版本控制就是这样，直到我遇到了git…<br>git是分布式版本控制系统，合适分布式开发，强调个体。速度快、灵活，代码冲突了也比较好解决，最让我喜欢的还是git的分支切换。</p>\n<h2 id=\"在github上创建一个空项目\"><a href=\"#在github上创建一个空项目\" class=\"headerlink\" title=\"在github上创建一个空项目\"></a>在github上创建一个空项目</h2><p>我这里git的远程仓库选择<a href=\"https://github.com/\">github</a>，github是全球最大的代码托管库，在国内也有许多类似的站点可以选用（比如：<a href=\"https://coding.net\">coding</a>）。</p>\n<ul>\n<li><p>这里假定已经有了github账号。登录github点击右上角的加号，选择new repository选项新建一个项目。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-cd1f6f307fea4726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新建项目\"></p>\n</li>\n<li><p>填写新项目的基本信息：<br>新的项目名称，描述，其他默认，然后点击create repository按钮新建项目<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-6bf678d065940f59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"填写新项目基本信息\"></p>\n</li>\n<li><p>克隆新项目至本地<br>点击README按钮，去编辑README文件。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-40f60ac69c4afd6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新建README文件\"><br>写下hello world，然后到页面最下方点击commit new file按钮。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-48f7ddbdb33cd78e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hello world\"><br>点击use https 然后点复制按钮<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-0d177247118d3038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复制\"><br>去你的本地文件夹，打开git bash。输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;刚才复制的项目地址&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-ec0fa26bc9843e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git bash\"><br>如果还没安装git，可以自行百度<a href=\"https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&amp;wd=&amp;eqid=a85caa0700009e1500000004575021d8\">下载git</a>，安装无脑，一路下一步就好。<br>到此为止，新的项目就好了。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-9f00c74a78fa4d75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h2 id=\"提交-commit\"><a href=\"#提交-commit\" class=\"headerlink\" title=\"提交 (commit)\"></a>提交 (commit)</h2><p>进入新建的项目文件夹，就可以开始你的代码了。<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-24afb72cb0496765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"demo文件夹\"><br>这里为了方便，假定已经在项目里写了一段代码。准备提交至远端代码仓库。进入项目文件夹，输入命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-6d946ed08091f3fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git status\"><br>添加更改的代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-e40153954f71e885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git add .\"><br>提交代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"提交代码\"</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-96ce5cd702905509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"提交代码\"><br>log命令可以查看提交历史<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-869b30a6c9cff67e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h2 id=\"推送提交至远程分支push\"><a href=\"#推送提交至远程分支push\" class=\"headerlink\" title=\"推送提交至远程分支push\"></a>推送提交至远程分支push</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2005796-bff28f8a53e97a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"push\"><br>至此就完成了git的首次提交<br><img src=\"http://upload-images.jianshu.io/upload_images/2005796-c1d96cf942bd63ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>这里使用的bash是<a href=\"https://www.baidu.com/link?url=3rT5SSGCqN8J3w0rw8T7fHKvTEZ6NiYfDK5sxYGK5GCTeEp3A0ufmhe8YVi0-zGiMpcEIk2ibq0s1J-z_Ys8x5VLcpDCwbgvNEE7RBVBj6O&amp;wd=&amp;eqid=a85caa0700009e1500000004575021d8\">git(戳这里下载)</a>自带的，如果觉得打命令搞不懂，可以试试图形化界面(例如：sourcetree)</p>\n"},{"title":"gulp实现hexoMarkDown同步编译","date":"2016-05-14T09:02:07.000Z","_content":"**作为一个前端，作为一个具有捣(zhuang)鼓(bi)精神的前端，心想着得有一个可以写写技术文章的地方呀！于是就开始玩起了hexo。**\n\n虽然说Markdown设计之初就是为了方便作者快捷的写作。但是作为一个有强迫症的前端，写了一段总想看看写成了什么样子，但无奈看一眼得切到命令行bash输入\n``` javascript\nhexo generate //缩写 hexo g\n```\n在hexo编译完成后又切到浏览器刷新查看。心想，这不行啊，这样子怎么对得起捣(zhuang)鼓(bi)精神。于是就想着在里面加入gulp的想法。话不多说，下面就上代码。\n\n## 安装gulp\n和hexo一样gulp也是需要全局安装的\n``` bash\nnpm i gulp -g\n```\n\n## 安装gulp-shell\ngulp并没有hexo的组件，所以这里选择使用gulp-shell来实现。\n``` bash\nnpm i -D gulp-shell\n```\n\n## 编写gulpfile.js文件\n新建并打开gulpfile.js\n``` bash\nvim gulpfile.js\n```\n编写gulp代码,引入gulp、gulp-shell和gulp-notify\n``` javaScript\nvar gulp = require('gulp');\nvar shell = require('gulp-shell');//bash输入\nvar notify = require('gulp-notify');//系统通知\n```\n编写默认任务\n``` javaScript\ngulp.task(\"default\",function(){\n  gulp.src(\"./public/index.html\")\n    .pipe(shell([\n      'hexo g'\n    ]))\n    .pipe(notify('hexo编译完成！'));\n});\n```\n可以在bash里使用`gulp`来启动默认任务\n\n之前有用过gulp的同学可能会发现我gulp的src方法获取的地址只是一个文件，而且也没有指向source文件夹下的.md文件，这是因为这里根本不需要src方法来得到文件流。这里需要的只是其后的pipe方法来运行shell方法。\n然而gulp-shell还提供了另一种方法来执行\n``` javaScript\ngulp.task('default', shell.task([\n  'hexo g'\n]));\n```\n只是这样的方法却是不能接pipe方法也就不能使用notify的系统通知了。权衡之下，我选择了前者。\n\n## 编写watch任务\nwatch任务会监听指定文件的变更来触发默认任务\n``` javaScript\ngulp.task('watch',function(){\n  gulp.watch(\"./source/*/*md\",['default']);\n})\n```\n在bash里使用`gulp watch`来启动watch任务\n在编写完watch任务后，尽管已经解决了自动构建，但是本地调试却需要另一个bash界面来开启hexo的服务。\n于是，我还需要一个server任务来启动服务\n\n## 编写server任务\n``` javaScript\ngulp.task('server',shell.task([\n  'hexo server'\n]));\n```\n在bash里使用 `gulp server`来启动server任务\n于是这里就可以改写watch任务\n``` javaScript\ngulp.task('watch',function(){\n  gulp.start('server');\n  gulp.watch(\"./source/*/*md\",['default']);\n})\n```\n这样就可以在启动watch任务的时候也开启本地服务了。\n到了这一步，就可以在bash命令行输入\n``` bash\ngulp watch\n```\n回车后就可以开始边写边看了\n\n**这里还缺少了自动刷新的功能，这个功能使用我之前的方法并不能起到作用，还需要再思考思考**\n\n好了，我的第一篇技术文章就这么结束了，哈哈。\n","source":"_posts/gulp实现hexoMarkDown同步编译.md","raw":"---\ntitle: gulp实现hexoMarkDown同步编译\ndate: 2016-05-14 17:02:07\ntags:\n---\n**作为一个前端，作为一个具有捣(zhuang)鼓(bi)精神的前端，心想着得有一个可以写写技术文章的地方呀！于是就开始玩起了hexo。**\n\n虽然说Markdown设计之初就是为了方便作者快捷的写作。但是作为一个有强迫症的前端，写了一段总想看看写成了什么样子，但无奈看一眼得切到命令行bash输入\n``` javascript\nhexo generate //缩写 hexo g\n```\n在hexo编译完成后又切到浏览器刷新查看。心想，这不行啊，这样子怎么对得起捣(zhuang)鼓(bi)精神。于是就想着在里面加入gulp的想法。话不多说，下面就上代码。\n\n## 安装gulp\n和hexo一样gulp也是需要全局安装的\n``` bash\nnpm i gulp -g\n```\n\n## 安装gulp-shell\ngulp并没有hexo的组件，所以这里选择使用gulp-shell来实现。\n``` bash\nnpm i -D gulp-shell\n```\n\n## 编写gulpfile.js文件\n新建并打开gulpfile.js\n``` bash\nvim gulpfile.js\n```\n编写gulp代码,引入gulp、gulp-shell和gulp-notify\n``` javaScript\nvar gulp = require('gulp');\nvar shell = require('gulp-shell');//bash输入\nvar notify = require('gulp-notify');//系统通知\n```\n编写默认任务\n``` javaScript\ngulp.task(\"default\",function(){\n  gulp.src(\"./public/index.html\")\n    .pipe(shell([\n      'hexo g'\n    ]))\n    .pipe(notify('hexo编译完成！'));\n});\n```\n可以在bash里使用`gulp`来启动默认任务\n\n之前有用过gulp的同学可能会发现我gulp的src方法获取的地址只是一个文件，而且也没有指向source文件夹下的.md文件，这是因为这里根本不需要src方法来得到文件流。这里需要的只是其后的pipe方法来运行shell方法。\n然而gulp-shell还提供了另一种方法来执行\n``` javaScript\ngulp.task('default', shell.task([\n  'hexo g'\n]));\n```\n只是这样的方法却是不能接pipe方法也就不能使用notify的系统通知了。权衡之下，我选择了前者。\n\n## 编写watch任务\nwatch任务会监听指定文件的变更来触发默认任务\n``` javaScript\ngulp.task('watch',function(){\n  gulp.watch(\"./source/*/*md\",['default']);\n})\n```\n在bash里使用`gulp watch`来启动watch任务\n在编写完watch任务后，尽管已经解决了自动构建，但是本地调试却需要另一个bash界面来开启hexo的服务。\n于是，我还需要一个server任务来启动服务\n\n## 编写server任务\n``` javaScript\ngulp.task('server',shell.task([\n  'hexo server'\n]));\n```\n在bash里使用 `gulp server`来启动server任务\n于是这里就可以改写watch任务\n``` javaScript\ngulp.task('watch',function(){\n  gulp.start('server');\n  gulp.watch(\"./source/*/*md\",['default']);\n})\n```\n这样就可以在启动watch任务的时候也开启本地服务了。\n到了这一步，就可以在bash命令行输入\n``` bash\ngulp watch\n```\n回车后就可以开始边写边看了\n\n**这里还缺少了自动刷新的功能，这个功能使用我之前的方法并不能起到作用，还需要再思考思考**\n\n好了，我的第一篇技术文章就这么结束了，哈哈。\n","slug":"gulp实现hexoMarkDown同步编译","published":1,"updated":"2016-05-14T11:01:39.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioyec82a0002usv4819oc7um","content":"<p><strong>作为一个前端，作为一个具有捣(zhuang)鼓(bi)精神的前端，心想着得有一个可以写写技术文章的地方呀！于是就开始玩起了hexo。</strong></p>\n<p>虽然说Markdown设计之初就是为了方便作者快捷的写作。但是作为一个有强迫症的前端，写了一段总想看看写成了什么样子，但无奈看一眼得切到命令行bash输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate <span class=\"comment\">//缩写 hexo g</span></span><br></pre></td></tr></table></figure></p>\n<p>在hexo编译完成后又切到浏览器刷新查看。心想，这不行啊，这样子怎么对得起捣(zhuang)鼓(bi)精神。于是就想着在里面加入gulp的想法。话不多说，下面就上代码。</p>\n<h2 id=\"安装gulp\"><a href=\"#安装gulp\" class=\"headerlink\" title=\"安装gulp\"></a>安装gulp</h2><p>和hexo一样gulp也是需要全局安装的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i gulp -g</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装gulp-shell\"><a href=\"#安装gulp-shell\" class=\"headerlink\" title=\"安装gulp-shell\"></a>安装gulp-shell</h2><p>gulp并没有hexo的组件，所以这里选择使用gulp-shell来实现。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D gulp-shell</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写gulpfile-js文件\"><a href=\"#编写gulpfile-js文件\" class=\"headerlink\" title=\"编写gulpfile.js文件\"></a>编写gulpfile.js文件</h2><p>新建并打开gulpfile.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim gulpfile.js</span><br></pre></td></tr></table></figure></p>\n<p>编写gulp代码,引入gulp、gulp-shell和gulp-notify<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> shell = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-shell'</span>);<span class=\"comment\">//bash输入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> notify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-notify'</span>);<span class=\"comment\">//系统通知</span></span><br></pre></td></tr></table></figure></p>\n<p>编写默认任务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"default\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">\"./public/index.html\"</span>)</span><br><span class=\"line\">    .pipe(shell([</span><br><span class=\"line\">      <span class=\"string\">'hexo g'</span></span><br><span class=\"line\">    ]))</span><br><span class=\"line\">    .pipe(notify(<span class=\"string\">'hexo编译完成！'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>可以在bash里使用<code>gulp</code>来启动默认任务</p>\n<p>之前有用过gulp的同学可能会发现我gulp的src方法获取的地址只是一个文件，而且也没有指向source文件夹下的.md文件，这是因为这里根本不需要src方法来得到文件流。这里需要的只是其后的pipe方法来运行shell方法。<br>然而gulp-shell还提供了另一种方法来执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, shell.task([</span><br><span class=\"line\">  <span class=\"string\">'hexo g'</span></span><br><span class=\"line\">]));</span><br></pre></td></tr></table></figure></p>\n<p>只是这样的方法却是不能接pipe方法也就不能使用notify的系统通知了。权衡之下，我选择了前者。</p>\n<h2 id=\"编写watch任务\"><a href=\"#编写watch任务\" class=\"headerlink\" title=\"编写watch任务\"></a>编写watch任务</h2><p>watch任务会监听指定文件的变更来触发默认任务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">\"./source/*/*md\"</span>,[<span class=\"string\">'default'</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在bash里使用<code>gulp watch</code>来启动watch任务<br>在编写完watch任务后，尽管已经解决了自动构建，但是本地调试却需要另一个bash界面来开启hexo的服务。<br>于是，我还需要一个server任务来启动服务</p>\n<h2 id=\"编写server任务\"><a href=\"#编写server任务\" class=\"headerlink\" title=\"编写server任务\"></a>编写server任务</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>,shell.task([</span><br><span class=\"line\">  <span class=\"string\">'hexo server'</span></span><br><span class=\"line\">]));</span><br></pre></td></tr></table></figure>\n<p>在bash里使用 <code>gulp server</code>来启动server任务<br>于是这里就可以改写watch任务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.start(<span class=\"string\">'server'</span>);</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">\"./source/*/*md\"</span>,[<span class=\"string\">'default'</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以在启动watch任务的时候也开启本地服务了。<br>到了这一步，就可以在bash命令行输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp watch</span><br></pre></td></tr></table></figure></p>\n<p>回车后就可以开始边写边看了</p>\n<p><strong>这里还缺少了自动刷新的功能，这个功能使用我之前的方法并不能起到作用，还需要再思考思考</strong></p>\n<p>好了，我的第一篇技术文章就这么结束了，哈哈。</p>\n","excerpt":"","more":"<p><strong>作为一个前端，作为一个具有捣(zhuang)鼓(bi)精神的前端，心想着得有一个可以写写技术文章的地方呀！于是就开始玩起了hexo。</strong></p>\n<p>虽然说Markdown设计之初就是为了方便作者快捷的写作。但是作为一个有强迫症的前端，写了一段总想看看写成了什么样子，但无奈看一眼得切到命令行bash输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate <span class=\"comment\">//缩写 hexo g</span></span><br></pre></td></tr></table></figure></p>\n<p>在hexo编译完成后又切到浏览器刷新查看。心想，这不行啊，这样子怎么对得起捣(zhuang)鼓(bi)精神。于是就想着在里面加入gulp的想法。话不多说，下面就上代码。</p>\n<h2 id=\"安装gulp\"><a href=\"#安装gulp\" class=\"headerlink\" title=\"安装gulp\"></a>安装gulp</h2><p>和hexo一样gulp也是需要全局安装的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i gulp -g</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装gulp-shell\"><a href=\"#安装gulp-shell\" class=\"headerlink\" title=\"安装gulp-shell\"></a>安装gulp-shell</h2><p>gulp并没有hexo的组件，所以这里选择使用gulp-shell来实现。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D gulp-shell</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写gulpfile-js文件\"><a href=\"#编写gulpfile-js文件\" class=\"headerlink\" title=\"编写gulpfile.js文件\"></a>编写gulpfile.js文件</h2><p>新建并打开gulpfile.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim gulpfile.js</span><br></pre></td></tr></table></figure></p>\n<p>编写gulp代码,引入gulp、gulp-shell和gulp-notify<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> shell = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-shell'</span>);<span class=\"comment\">//bash输入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> notify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-notify'</span>);<span class=\"comment\">//系统通知</span></span><br></pre></td></tr></table></figure></p>\n<p>编写默认任务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"default\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">\"./public/index.html\"</span>)</span><br><span class=\"line\">    .pipe(shell([</span><br><span class=\"line\">      <span class=\"string\">'hexo g'</span></span><br><span class=\"line\">    ]))</span><br><span class=\"line\">    .pipe(notify(<span class=\"string\">'hexo编译完成！'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>可以在bash里使用<code>gulp</code>来启动默认任务</p>\n<p>之前有用过gulp的同学可能会发现我gulp的src方法获取的地址只是一个文件，而且也没有指向source文件夹下的.md文件，这是因为这里根本不需要src方法来得到文件流。这里需要的只是其后的pipe方法来运行shell方法。<br>然而gulp-shell还提供了另一种方法来执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, shell.task([</span><br><span class=\"line\">  <span class=\"string\">'hexo g'</span></span><br><span class=\"line\">]));</span><br></pre></td></tr></table></figure></p>\n<p>只是这样的方法却是不能接pipe方法也就不能使用notify的系统通知了。权衡之下，我选择了前者。</p>\n<h2 id=\"编写watch任务\"><a href=\"#编写watch任务\" class=\"headerlink\" title=\"编写watch任务\"></a>编写watch任务</h2><p>watch任务会监听指定文件的变更来触发默认任务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">\"./source/*/*md\"</span>,[<span class=\"string\">'default'</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在bash里使用<code>gulp watch</code>来启动watch任务<br>在编写完watch任务后，尽管已经解决了自动构建，但是本地调试却需要另一个bash界面来开启hexo的服务。<br>于是，我还需要一个server任务来启动服务</p>\n<h2 id=\"编写server任务\"><a href=\"#编写server任务\" class=\"headerlink\" title=\"编写server任务\"></a>编写server任务</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>,shell.task([</span><br><span class=\"line\">  <span class=\"string\">'hexo server'</span></span><br><span class=\"line\">]));</span><br></pre></td></tr></table></figure>\n<p>在bash里使用 <code>gulp server</code>来启动server任务<br>于是这里就可以改写watch任务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.start(<span class=\"string\">'server'</span>);</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">\"./source/*/*md\"</span>,[<span class=\"string\">'default'</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以在启动watch任务的时候也开启本地服务了。<br>到了这一步，就可以在bash命令行输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp watch</span><br></pre></td></tr></table></figure></p>\n<p>回车后就可以开始边写边看了</p>\n<p><strong>这里还缺少了自动刷新的功能，这个功能使用我之前的方法并不能起到作用，还需要再思考思考</strong></p>\n<p>好了，我的第一篇技术文章就这么结束了，哈哈。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-05-02T04:52:32.137Z","updated":"2016-05-02T04:52:32.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioyec82a0003usv46v751jod","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo 基础操作","date":"2016-05-07T06:36:28.000Z","_content":"# 安装hexo\n\n``` bash\n命令：npm install-g hexo\n```\n\n创建项目文件夹 eg: leenty.github.io\n \n进入文件夹 初始化hexo\n\n``` bash\n命令：hexo init\n```\n\n几秒钟后你的hexo项目就创建好了\n\n接下来就可以看看这个项目了，在此之前需要先生成静态页面。\n\n``` bash \n命令：hexo generate (缩写：hexo g)\n```\n\n开始本地预览服务\n\n命令：hexo server\n","source":"_posts/hexo-基础操作.md","raw":"---\ntitle: hexo 基础操作\ndate: 2016-05-07 14:36:28\ntags:\n---\n# 安装hexo\n\n``` bash\n命令：npm install-g hexo\n```\n\n创建项目文件夹 eg: leenty.github.io\n \n进入文件夹 初始化hexo\n\n``` bash\n命令：hexo init\n```\n\n几秒钟后你的hexo项目就创建好了\n\n接下来就可以看看这个项目了，在此之前需要先生成静态页面。\n\n``` bash \n命令：hexo generate (缩写：hexo g)\n```\n\n开始本地预览服务\n\n命令：hexo server\n","slug":"hexo-基础操作","published":1,"updated":"2016-05-14T09:00:13.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioyec82a0004usv4i536psr0","content":"<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：npm install-g hexo</span><br></pre></td></tr></table></figure>\n<p>创建项目文件夹 eg: leenty.github.io</p>\n<p>进入文件夹 初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：hexo init</span><br></pre></td></tr></table></figure>\n<p>几秒钟后你的hexo项目就创建好了</p>\n<p>接下来就可以看看这个项目了，在此之前需要先生成静态页面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：hexo generate (缩写：hexo g)</span><br></pre></td></tr></table></figure>\n<p>开始本地预览服务</p>\n<p>命令：hexo server</p>\n","excerpt":"","more":"<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：npm install-g hexo</span><br></pre></td></tr></table></figure>\n<p>创建项目文件夹 eg: leenty.github.io</p>\n<p>进入文件夹 初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：hexo init</span><br></pre></td></tr></table></figure>\n<p>几秒钟后你的hexo项目就创建好了</p>\n<p>接下来就可以看看这个项目了，在此之前需要先生成静态页面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：hexo generate (缩写：hexo g)</span><br></pre></td></tr></table></figure>\n<p>开始本地预览服务</p>\n<p>命令：hexo server</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}